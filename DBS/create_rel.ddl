set echo on
CREATE OR REPLACE PROCEDURE "ZRUS_ALL_OBJEKTY_SCHEMATU" AS
-- pokud v logu bude uvedeno, ze nektery objekt nebyl zrusen, protoze na nej jiny jeste existujici objekt stavi,
-- spust proceduru opakovane, dokud se nezrusi vse
v_pom PLS_INTEGER;
BEGIN
LOOP
FOR irec IN (SELECT DISTINCT
                    object_type,object_name,
                    'drop '||object_type||' "'||object_name||'"'||
                    CASE object_type WHEN 'TABLE' THEN ' cascade constraints purge'
                                     ELSE ' '
                    END AS prikaz
              FROM user_objects
              WHERE object_name <> 'ZRUS_ALL_OBJEKTY_SCHEMATU'
            )
  LOOP
   BEGIN
   DBMS_OUTPUT.put_line('prikaz '||irec.prikaz);
      EXECUTE IMMEDIATE irec.prikaz;
   EXCEPTION
      WHEN OTHERS THEN DBMS_OUTPUT.put('neni ');
   END;
   DBMS_OUTPUT.put_line('zrusen(a) '||irec.object_type||' '||irec.object_name);
  END LOOP;
SELECT COUNT(*) INTO v_pom
FROM user_objects
WHERE object_name <> 'ZRUS_ALL_OBJEKTY_SCHEMATU';
EXIT WHEN v_pom = 0;
END LOOP;
DBMS_OUTPUT.put_line('hotovo!');
END ZRUS_ALL_OBJEKTY_SCHEMATU;
/
execute ZRUS_ALL_OBJEKTY_SCHEMATU
execute ZRUS_ALL_OBJEKTY_SCHEMATU
execute ZRUS_ALL_OBJEKTY_SCHEMATU


-- Generated by Oracle SQL Developer Data Modeler 4.1.3.901
--   at:        2016-05-16 00:38:45 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g




CREATE TABLE BAND
  (
    NAME     CHAR (50 CHAR) NOT NULL ,
    STYLE    CHAR (50 CHAR) NOT NULL ,
    BIRTHDAY DATE NOT NULL ,
    DEATHDAY DATE
  ) ;
ALTER TABLE BAND ADD CONSTRAINT BAND_PK PRIMARY KEY ( NAME ) ;


CREATE TABLE CONCERT
  (
    DATETIME_START DATE NOT NULL ,
    DATETIME_END   DATE NOT NULL ,
    NAME           CHAR (50 CHAR) ,
    TICKET_PRICE   INTEGER NOT NULL ,
    PLACE_ADDRESS  CHAR (100 CHAR) NOT NULL
  ) ;
ALTER TABLE CONCERT ADD CONSTRAINT CONCERT_PK PRIMARY KEY ( PLACE_ADDRESS, DATETIME_START ) ;


CREATE TABLE ELECTRONIC
  (
    INSTRUMENT_INS_ID INTEGER NOT NULL ,
    SYNTHESIZER       CHAR (1) NOT NULL
  ) ;
ALTER TABLE ELECTRONIC ADD CONSTRAINT ELECTRONIC_PK PRIMARY KEY ( INSTRUMENT_INS_ID ) ;


CREATE TABLE FAN
  (
    FAN_ID     INTEGER NOT NULL ,
    NAME       CHAR (30 CHAR) NOT NULL ,
    FAM_NAME   CHAR (30 CHAR) NOT NULL ,
    HAIR_COLOR CHAR (10 CHAR) ,
    TATOO      CHAR (1)
  ) ;
ALTER TABLE FAN ADD CONSTRAINT FAN_PK PRIMARY KEY ( FAN_ID ) ;


CREATE TABLE HAVING_FUN
  (
    CONCERT_ADDRESS        CHAR (100 CHAR) NOT NULL ,
    CONCERT_DATETIME_START DATE NOT NULL ,
    FAN_FAN_ID             INTEGER NOT NULL
  ) ;
ALTER TABLE HAVING_FUN ADD CONSTRAINT HAVING_FUN_PK PRIMARY KEY ( FAN_FAN_ID, CONCERT_ADDRESS, CONCERT_DATETIME_START ) ;


CREATE TABLE IN_BAND
  (
    BAND_NAME       CHAR (50 CHAR) NOT NULL ,
    MUSICIAN_FAN_ID INTEGER NOT NULL
  ) ;
ALTER TABLE IN_BAND ADD CONSTRAINT IN_BAND_PK PRIMARY KEY ( BAND_NAME, MUSICIAN_FAN_ID ) ;


CREATE TABLE IS_FAN
  (
    FAN_FAN_ID INTEGER NOT NULL ,
    BAND_NAME  CHAR (50 CHAR) NOT NULL
  ) ;
ALTER TABLE IS_FAN ADD CONSTRAINT IS_FAN_PK PRIMARY KEY ( FAN_FAN_ID, BAND_NAME ) ;


CREATE TABLE KEYBOARD
  (
    INSTRUMENT_INS_ID INTEGER NOT NULL ,
    NUM_OF_OCTAVES    INTEGER NOT NULL
  ) ;
ALTER TABLE KEYBOARD ADD CONSTRAINT KEYBOARD_PK PRIMARY KEY ( INSTRUMENT_INS_ID ) ;


CREATE TABLE MIC
  (
    INSTRUMENT_INS_ID INTEGER NOT NULL ,
    TYPE              VARCHAR2 (50 CHAR) NOT NULL
  ) ;
ALTER TABLE MIC ADD CONSTRAINT MIC_PK PRIMARY KEY ( INSTRUMENT_INS_ID ) ;


CREATE TABLE MUSICIAN
  (
    ROLE       CHAR (20 CHAR) NOT NULL ,
    FAN_FAN_ID INTEGER NOT NULL
  ) ;
ALTER TABLE MUSICIAN ADD CONSTRAINT MUSICIAN_PK PRIMARY KEY ( FAN_FAN_ID ) ;


CREATE TABLE MUS_INST
  (
    INSTRUMENT_INS_ID INTEGER NOT NULL ,
    INSTRUMENT_NAME   CHAR (30 CHAR) ,
    MUSICIAN_FAN_ID   INTEGER NOT NULL ,
    INST_DESC_ID      VARCHAR2 (15 CHAR) NOT NULL
  ) ;
ALTER TABLE MUS_INST ADD CONSTRAINT MUS_INST_PK PRIMARY KEY ( INSTRUMENT_INS_ID ) ;


CREATE TABLE OTHER
  (
    INSTRUMENT_INS_ID INTEGER NOT NULL ,
    INSTRUMENT_NAME   VARCHAR2 (50 CHAR) NOT NULL
  ) ;
ALTER TABLE OTHER ADD CONSTRAINT OTHER_PK PRIMARY KEY ( INSTRUMENT_INS_ID ) ;


CREATE TABLE PERCUSSION
  (
    INSTRUMENT_INS_ID INTEGER NOT NULL ,
    NEED_STICKS       CHAR (1) NOT NULL
  ) ;
ALTER TABLE PERCUSSION ADD CONSTRAINT PERCUSSION_PK PRIMARY KEY ( INSTRUMENT_INS_ID ) ;


CREATE TABLE PERFORMANCE
  (
    CONCERT_ADDRESS        CHAR (100 CHAR) NOT NULL ,
    CONCERT_DATETIME_START DATE NOT NULL ,
    BAND_NAME              CHAR (50 CHAR) NOT NULL
  ) ;
ALTER TABLE PERFORMANCE ADD CONSTRAINT PERFORMANCE_PK PRIMARY KEY ( CONCERT_ADDRESS, CONCERT_DATETIME_START, BAND_NAME ) ;


CREATE TABLE PLACE
  (
    ADDRESS      CHAR (100 CHAR) NOT NULL ,
    PHONE_NUMBER CHAR (20 CHAR) NOT NULL ,
    CAPACITY     INTEGER NOT NULL ,
    NAME         VARCHAR2 (20 CHAR)
  ) ;
ALTER TABLE PLACE ADD CONSTRAINT PLACE_PK PRIMARY KEY ( ADDRESS ) ;


CREATE TABLE SONG
  (
    SONG_NAME VARCHAR2 (50 CHAR) NOT NULL ,
    ALBUM     VARCHAR2 (50 CHAR) NOT NULL ,
    YEAR      DATE NOT NULL ,
    LENGTH    INTEGER NOT NULL ,
    BAND_NAME CHAR (50 CHAR) NOT NULL
  ) ;
ALTER TABLE SONG ADD CONSTRAINT SONG_PK PRIMARY KEY ( BAND_NAME, ALBUM, SONG_NAME ) ;


CREATE TABLE STRINGED
  (
    INSTRUMENT_INS_ID INTEGER NOT NULL ,
    NUM_OF_STRINGS    INTEGER NOT NULL
  ) ;
ALTER TABLE STRINGED ADD CONSTRAINT STRINGED_PK PRIMARY KEY ( INSTRUMENT_INS_ID ) ;


CREATE TABLE WIND
  (
    INSTRUMENT_INS_ID INTEGER NOT NULL ,
    RANGE             VARCHAR2 (50 CHAR) NOT NULL
  ) ;
ALTER TABLE WIND ADD CONSTRAINT WIND_PK PRIMARY KEY ( INSTRUMENT_INS_ID ) ;


ALTER TABLE CONCERT ADD CONSTRAINT CONCERT_PLACE_FK FOREIGN KEY ( PLACE_ADDRESS ) REFERENCES PLACE ( ADDRESS ) ;

ALTER TABLE ELECTRONIC ADD CONSTRAINT ELECTRONIC_MUS_INST_FK FOREIGN KEY ( INSTRUMENT_INS_ID ) REFERENCES MUS_INST ( INSTRUMENT_INS_ID ) ;

ALTER TABLE HAVING_FUN ADD CONSTRAINT HAVING_FUN_CONCERT_FK FOREIGN KEY ( CONCERT_ADDRESS, CONCERT_DATETIME_START ) REFERENCES CONCERT ( PLACE_ADDRESS, DATETIME_START ) ;

ALTER TABLE HAVING_FUN ADD CONSTRAINT HAVING_FUN_FAN_FK FOREIGN KEY ( FAN_FAN_ID ) REFERENCES FAN ( FAN_ID ) ;

ALTER TABLE IN_BAND ADD CONSTRAINT IN_BAND_BAND_FK FOREIGN KEY ( BAND_NAME ) REFERENCES BAND ( NAME ) ;

ALTER TABLE IN_BAND ADD CONSTRAINT IN_BAND_MUSICIAN_FK FOREIGN KEY ( MUSICIAN_FAN_ID ) REFERENCES MUSICIAN ( FAN_FAN_ID ) ;

ALTER TABLE IS_FAN ADD CONSTRAINT IS_FAN_BAND_FK FOREIGN KEY ( BAND_NAME ) REFERENCES BAND ( NAME ) ;

ALTER TABLE IS_FAN ADD CONSTRAINT IS_FAN_FAN_FK FOREIGN KEY ( FAN_FAN_ID ) REFERENCES FAN ( FAN_ID ) ;

ALTER TABLE KEYBOARD ADD CONSTRAINT KEYBOARD_MUS_INST_FK FOREIGN KEY ( INSTRUMENT_INS_ID ) REFERENCES MUS_INST ( INSTRUMENT_INS_ID ) ;

ALTER TABLE MIC ADD CONSTRAINT MIC_MUS_INST_FK FOREIGN KEY ( INSTRUMENT_INS_ID ) REFERENCES MUS_INST ( INSTRUMENT_INS_ID ) ;

ALTER TABLE MUSICIAN ADD CONSTRAINT MUSICIAN_FAN_FK FOREIGN KEY ( FAN_FAN_ID ) REFERENCES FAN ( FAN_ID ) ;

ALTER TABLE MUS_INST ADD CONSTRAINT MUS_INST_MUSICIAN_FK FOREIGN KEY ( MUSICIAN_FAN_ID ) REFERENCES MUSICIAN ( FAN_FAN_ID ) ;

ALTER TABLE OTHER ADD CONSTRAINT OTHER_MUS_INST_FK FOREIGN KEY ( INSTRUMENT_INS_ID ) REFERENCES MUS_INST ( INSTRUMENT_INS_ID ) ;

ALTER TABLE PERCUSSION ADD CONSTRAINT PERCUSSION_MUS_INST_FK FOREIGN KEY ( INSTRUMENT_INS_ID ) REFERENCES MUS_INST ( INSTRUMENT_INS_ID ) ;

ALTER TABLE PERFORMANCE ADD CONSTRAINT PERFORMANCE_BAND_FK FOREIGN KEY ( BAND_NAME ) REFERENCES BAND ( NAME ) ;

ALTER TABLE PERFORMANCE ADD CONSTRAINT PERFORMANCE_CONCERT_FK FOREIGN KEY ( CONCERT_ADDRESS, CONCERT_DATETIME_START ) REFERENCES CONCERT ( PLACE_ADDRESS, DATETIME_START ) ;

ALTER TABLE SONG ADD CONSTRAINT SONG_BAND_FK FOREIGN KEY ( BAND_NAME ) REFERENCES BAND ( NAME ) ;

ALTER TABLE STRINGED ADD CONSTRAINT STRINGED_MUS_INST_FK FOREIGN KEY ( INSTRUMENT_INS_ID ) REFERENCES MUS_INST ( INSTRUMENT_INS_ID ) ;

ALTER TABLE WIND ADD CONSTRAINT WIND_MUS_INST_FK FOREIGN KEY ( INSTRUMENT_INS_ID ) REFERENCES MUS_INST ( INSTRUMENT_INS_ID ) ;

CREATE OR REPLACE TRIGGER ARC_FKArc_1_ELECTRONIC BEFORE
  INSERT OR
  UPDATE OF INSTRUMENT_INS_ID ON ELECTRONIC FOR EACH ROW DECLARE d VARCHAR2 (15 CHAR);
  BEGIN
    SELECT A.INST_DESC_ID
    INTO d
    FROM MUS_INST A
    WHERE A.INSTRUMENT_INS_ID = :new.INSTRUMENT_INS_ID;
    IF (d                    IS NULL OR d <> 'ELECTRONIC') THEN
      raise_application_error(-20223,'FK ELECTRONIC_MUS_INST_FK in Table ELECTRONIC violates Arc constraint on Table MUS_INST - discriminator column INST_DESC_ID doesn''t have value ''ELECTRONIC''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /
CREATE OR REPLACE TRIGGER ARC_FKArc_1_WIND BEFORE
  INSERT OR
  UPDATE OF INSTRUMENT_INS_ID ON WIND FOR EACH ROW DECLARE d VARCHAR2 (15 CHAR);
  BEGIN
    SELECT A.INST_DESC_ID
    INTO d
    FROM MUS_INST A
    WHERE A.INSTRUMENT_INS_ID = :new.INSTRUMENT_INS_ID;
    IF (d                    IS NULL OR d <> 'WIND') THEN
      raise_application_error(-20223,'FK WIND_MUS_INST_FK in Table WIND violates Arc constraint on Table MUS_INST - discriminator column INST_DESC_ID doesn''t have value ''WIND''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /
CREATE OR REPLACE TRIGGER ARC_FKArc_1_PERCUSSION BEFORE
  INSERT OR
  UPDATE OF INSTRUMENT_INS_ID ON PERCUSSION FOR EACH ROW DECLARE d VARCHAR2 (15 CHAR);
  BEGIN
    SELECT A.INST_DESC_ID
    INTO d
    FROM MUS_INST A
    WHERE A.INSTRUMENT_INS_ID = :new.INSTRUMENT_INS_ID;
    IF (d                    IS NULL OR d <> 'PERCUSSION') THEN
      raise_application_error(-20223,'FK PERCUSSION_MUS_INST_FK in Table PERCUSSION violates Arc constraint on Table MUS_INST - discriminator column INST_DESC_ID doesn''t have value ''PERCUSSION''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /
CREATE OR REPLACE TRIGGER ARC_FKArc_1_MIC BEFORE
  INSERT OR
  UPDATE OF INSTRUMENT_INS_ID ON MIC FOR EACH ROW DECLARE d VARCHAR2 (15 CHAR);
  BEGIN
    SELECT A.INST_DESC_ID
    INTO d
    FROM MUS_INST A
    WHERE A.INSTRUMENT_INS_ID = :new.INSTRUMENT_INS_ID;
    IF (d                    IS NULL OR d <> 'MIC') THEN
      raise_application_error(-20223,'FK MIC_MUS_INST_FK in Table MIC violates Arc constraint on Table MUS_INST - discriminator column INST_DESC_ID doesn''t have value ''MIC''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /
CREATE OR REPLACE TRIGGER ARC_FKArc_1_KEYBOARD BEFORE
  INSERT OR
  UPDATE OF INSTRUMENT_INS_ID ON KEYBOARD FOR EACH ROW DECLARE d VARCHAR2 (15 CHAR);
  BEGIN
    SELECT A.INST_DESC_ID
    INTO d
    FROM MUS_INST A
    WHERE A.INSTRUMENT_INS_ID = :new.INSTRUMENT_INS_ID;
    IF (d                    IS NULL OR d <> 'KEYBOARD') THEN
      raise_application_error(-20223,'FK KEYBOARD_MUS_INST_FK in Table KEYBOARD violates Arc constraint on Table MUS_INST - discriminator column INST_DESC_ID doesn''t have value ''KEYBOARD''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /
CREATE OR REPLACE TRIGGER ARC_FKArc_1_STRINGED BEFORE
  INSERT OR
  UPDATE OF INSTRUMENT_INS_ID ON STRINGED FOR EACH ROW DECLARE d VARCHAR2 (15 CHAR);
  BEGIN
    SELECT A.INST_DESC_ID
    INTO d
    FROM MUS_INST A
    WHERE A.INSTRUMENT_INS_ID = :new.INSTRUMENT_INS_ID;
    IF (d                    IS NULL OR d <> 'STRINGED') THEN
      raise_application_error(-20223,'FK STRINGED_MUS_INST_FK in Table STRINGED violates Arc constraint on Table MUS_INST - discriminator column INST_DESC_ID doesn''t have value ''STRINGED''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /
CREATE OR REPLACE TRIGGER ARC_FKArc_1_OTHER BEFORE
  INSERT OR
  UPDATE OF INSTRUMENT_INS_ID ON OTHER FOR EACH ROW DECLARE d VARCHAR2 (15 CHAR);
  BEGIN
    SELECT A.INST_DESC_ID
    INTO d
    FROM MUS_INST A
    WHERE A.INSTRUMENT_INS_ID = :new.INSTRUMENT_INS_ID;
    IF (d                    IS NULL OR d <> 'OTHER') THEN
      raise_application_error(-20223,'FK OTHER_MUS_INST_FK in Table OTHER violates Arc constraint on Table MUS_INST - discriminator column INST_DESC_ID doesn''t have value ''OTHER''');
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN OTHERS THEN
    RAISE;
  END;
  /


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            18
-- CREATE INDEX                             0
-- ALTER TABLE                             37
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           7
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
